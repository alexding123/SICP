#lang sicp
(define (install-syntax)
  (put 'syntax 'quote text-of-quotation)
  (put 'syntax 'set! eval-assignment)
  (put 'syntax 'define eval-definition)
  (put 'syntax 'if eval-if)
  (put 'syntax 'lambda (lambda (exp env)
                         (make-procedure (lambda-parameters exp)
                                         (lambda-body exp)
                                         env)))
  (put 'syntax 'begin (lambda (exp env)
                        (eval-sequence (begin-actions exp) env)))
  (put 'syntax 'cond (lambda (exp env)
                       (eval (cond->if exp) env)))
  (put 'syntax 'let (lambda (exp env)
                      (eval (let->combination exp) env))))
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((get 'syntax (car exp)) (apply-generic (car exp) exp env))
        ((application? exp) (apply-new (eval (operator exp) env)
                                       (list-of-values (operands exp) env)))
        (else (error "Unknown epxression type -- EVAL" exp))))
(define let-body caddr)
(define let-varexp cadr)
(define let-var car)
(define let-exp cadr)
(define (let->combination exp)
  (let ((sequence (let-varexp exp))
        (body (let-body exp)))
    (define (build-up seq var-list exp-list)
      (if (null? seq)
          (cons (make-lambda var-list body) exp-list)
          (let ((first (first-exp seq))
                (rest (rest-exps seq)))
            (build-up rest
                      (cons (let-var first) var-list)
                      (cons (let-exp seq) exp-list)))))
    build-up sequence '() '()))