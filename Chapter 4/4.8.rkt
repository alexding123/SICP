#lang sicp
(define (let-handle exp)
  (if (pair? (cadr exp))
      (let->combination exp)
      (let->function-call exp)))

(define (make-define name var-list body)
  (list 'define
        (cons name var-list)
        body))
(define (let->function-call exp)
  (let ((name (cadr exp))
        (sequence (caddr exp))
        (body (cadddr exp)))
    (define (build-up seq var-list exp-list)
      (if (null? seq)
          (cons (make-define name var-list body) (list name exp-list))
          (let ((first (first-exp seq))
                (rest (rest-exps seq)))
            (build-up rest
                      (cons (let-var first) var-list)
                      (cons (let-exp first) exp-list)))))
    (build-up sequence '() '())))
(define let-body caddr)
(define let-varexp cadr)
(define let-var car)
(define let-exp cadr)
(define first-exp car)
(define rest-exps cdr)
(define (let->combination exp)
  (let ((sequence (let-varexp exp))
        (body (let-body exp)))
    (define (build-up seq var-list exp-list)
      (if (null? seq)
          (cons (make-lambda var-list body) exp-list)
          (let ((first (first-exp seq))
                (rest (rest-exps seq)))
            (build-up rest
                      (cons (let-var first) var-list)
                      (cons (let-exp first) exp-list)))))
    build-up sequence '() '()))


(define lambda-parameters cadr)
(define lambda-body cddr)
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define let-test '(let fib-iter ((a 1)
                                   (b 0)
                                   (count 10))
                      (if (= count 0)
                          b
                          (fib-iter (+ a b) a (-count 1)))))
(let-handle let-test)