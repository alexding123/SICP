#lang sicp
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (car (cdr mobile)))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (car (cdr branch)))
(define (branch-weight branch)
  (if (pair? (branch-structure branch))
      (total-weight (branch-structure branch))
      (branch-structure branch)))
(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile)) (branch-weight (right-branch mobile))))
(define (branch-torque branch)
  (* (branch-length branch) (branch-weight branch)))
; highly inefficient algorithm: recalculates the torque on every level down
(define (balanced? mobile)
  (and (= (branch-torque (left-branch mobile)) (branch-torque (right-branch mobile)))
       (if (pair? (branch-structure (left-branch mobile)))
           (balanced? (branch-structure (left-branch mobile)))
           true)
       (if (pair? (branch-structure (right-branch mobile)))
           (balanced? (branch-structure (right-branch mobile)))
           true)))
; for testing
(define mobile (make-mobile (make-branch 10 25)
                                  (make-branch 5 20)))
(define another-mobile (make-mobile (make-branch 10 mobile)
                                          (make-branch 10 20)))
(balanced? mobile)
(define balance-mobile (make-mobile (make-branch 10 10)
                                          (make-branch 10 10)))
(define mobile-with-sub-mobile (make-mobile (make-branch 10 balance-mobile)
                                                  (make-branch 10 balance-mobile)))
(balanced? balance-mobile)
(balanced? mobile-with-sub-mobile)