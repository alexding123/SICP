#lang sicp
(define (car-n seqs)
  (if (pair? seqs)
      (map car seqs)
      seqs))
(define (cdr-n seqs)
  (if (pair? seqs)
      (map cdr seqs)
      seqs))
(define (accumulate op init seqs)
  (if (null? seqs)
      init
      (op (car seqs)
          (accumulate op init (cdr seqs)))))
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (car-n seqs))
            (accumulate-n op init (cdr-n seqs)))))
(define (unique-pairs n)
  