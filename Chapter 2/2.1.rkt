#lang sicp
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (make-rat n d)
  (define g (gcd (abs n) (abs d)))
  (define(make n d) (cons (/ n g) (/ d g)))
  (cond ((< d 0) (make (- n) (- d)))
        (else (make n d))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x))
  (newline))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define neg-1/2 (make-rat 1 -2))
(define pos-1/2 (make-rat -1 -2))
