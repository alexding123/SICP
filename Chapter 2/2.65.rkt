#lang sicp
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n) 
  (define left-tree (car (partial-tree elts (quotient (- n 1) 2))))
  (define this-entry (car (cdr (partial-tree elts (quotient (- n 1) 2)))))
  (define right-tree (car (partial-tree (cdr (cdr (partial-tree elts (quotient (- n 1) 2)))) (- n (+ (quotient (- n 1) 2) 1)))))
  (define remaining-elts (cdr (partial-tree (cdr (cdr (partial-tree elts (quotient (- n 1) 2)))) (- n (+ (quotient (- n 1) 2) 1)))))
  (if (= n 0)
      (cons '() elts)
      (cons (make-tree this-entry left-tree right-tree) remaining-elts)))
(list->tree (list 1 3 5 7 9 11))