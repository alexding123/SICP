#lang sicp
(define (car-n seqs)
  (if (pair? seqs)
      (map car seqs)
      seqs))
(define (cdr-n seqs)
  (if (pair? seqs)
      (map cdr seqs)
      seqs))
(define (accumulate op init seqs)
  (if (null? seqs)
      init
      (op (car seqs)
          (accumulate op init (cdr seqs)))))
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (car-n seqs))
            (accumulate-n op init (cdr-n seqs)))))
(define (matrix-*-vector m v)
  (map (lambda (x) (accumulate + 0 (map * x v))) m))
(define (transpose mat)
  (accumulate-n cons nil mat))
(define (matrix-*-matrix m n)
  (define cols (transpose n))
    (map (lambda (row) (matrix-*-vector cols row)) m))
;testing
(define matrix (list (list 1 2 3 4) (list 4 5 6 7) (list 8 9 10 11)))
(define vector (list 1 1 1 1))
(matrix-*-matrix matrix (transpose matrix))