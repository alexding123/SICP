#lang sicp
(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (define left-size (quotient (- n 1) 2))
      (define left-result (partial-tree elts left-size))
      (define left-tree (car left-result))
      (define non-left-elts (cdr left-result))
      (define right-size (- n (+ left-size 1)))
      (define this-entry (car non-left-elts))
      (define right-result (partial-tree (cdr non-left-elts) right-size))
      (define right-tree (car right-result))
      (define remaining-elts (cdr right-result))
      (cons (make-tree this-entry left-tree right-tree) remaining-elts)))