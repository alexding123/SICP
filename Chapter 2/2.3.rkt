#lang sicp
(define (square x)
  (* x x))
(define (make-point x y)
  (cons x y))
(define (make-segment a b)
  (cons a b))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (start-segment seg)
  (car seg))
(define (end-segment seg)
  (cdr seg))
(define (print-point p)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")")
  (newline))
(define (midpoint-segment seg)
  (define start (start-segment seg))
  (define end (end-segment seg))
  (make-point (/ (+ (x-point start) (x-point end)) 2.0)
              (/ (+ (y-point start) (y-point end)) 2.0)))
(define (length-segment seg)
  (define start (start-segment seg))
  (define end (end-segment seg))
  (sqrt (+ (square (- (x-point start) (x-point end)))
           (square (- (y-point start) (y-point end))))))
(define (make-rect p1 p2 p3)
  (cons (make-segment p1 p2) (make-segment p2 p3)))
(define (height-rect rect)
  (length-segment (car rect)))
(define (width-rect rect)
  (length-segment (cdr rect)))
(define (perimeter-rect rect)
  (* 2 (+ (width-rect rect) (height-rect rect))))
(define (area-rect rect)
  (* (width-rect rect) (height-rect rect)))
(define point1a (make-point 1 2))
(define point1b (make-point 1 -6))
(define point2a (make-point 4 2))
(define point2b (make-point 10 -100))
(define rectangle (make-rect point1b point1a point2a))
(display (perimeter-rect rectangle))